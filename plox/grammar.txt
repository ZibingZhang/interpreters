Grammar (Extended Backusâ€“Naur Form)
===================================
program        = declaration* EOF ;

declaration    = var-decl
               | statement ;

var-decl       = "var" IDENTIFIER ( "=" expression )? ";" ;

statement      = expr-stmt
               | for-stmt
               | if-stmt
               | print-stmt
               | while-stmt
               | block ;

expr-stmt      = expression ";" ;
for-stmt       = "for" "(" (var-decl | expr-stmt | ";")
                 expression? ;
                 expression? ")" statement ;
if-stmt        = "if" "(" expression ")"
                 statement ( "else" statement )? ;
print-stmt     = "print" expression ";" ;
while-stmt     = "while" "(" expression ")" statement ;
block          = "{" declaration* "}" ;

expression     = sequence ;
sequence       = assignment ( "," assignment )* ;
assignment     = IDENTIFIER "=" assignment
               | ternary ;
ternary        = logical-or "?" ternary ":" ternary ;
logical-or     = logical-and ( "or" logical-and )* ;
logical-and    = equality ( "or" equality )* ;
equality       = comparison ( ( "!=" | "==" ) comparison )* ;
comparison     = term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           = factor ( ( "-" | "+" ) factor )* ;
factor         = unary ( ( "/" | "*" ) unary )* ;
unary          = ( "!" | "-" ) unary
               | primary ;
primary        = "true" | "false" | "nil"
               | NUMBER | STRING
               | "(" expression ")" ";"
               | IDENTIFIED ;

Additional Rules for Error Checking
===================================
unary          | "+" unary
