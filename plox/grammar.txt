Grammar (Extended Backusâ€“Naur Form)
===================================
program        = declaration* EOF ;

declaration    = class-decl
               | fun-decl
               | var-decl
               | statement ;

class-decl     = "class" IDENTIFIER ( "<" IDENTIFIER )?
                 "{" function* "}" ;
fun-decl       = "fun" function ;
var-decl       = "var" IDENTIFIER ( "=" expression )? ";" ;
statement      = break-stmt
               | continue-stmt
               | expr-stmt
               | for-stmt
               | fun-stmt
               | if-stmt
               | return-stmt
               | while-stmt
               | block ;
function       = IDENTIFIER "(" parameters? ")" block ;

break-stmt    = "break" expression ";" ;
continue-stmt  = "continue" expression ";" ;
expr-stmt      = expression ";" ;
for-stmt       = "for" "(" (var-decl | expr-stmt | ";")
                 expression? ;
                 expression? ")" statement ;
if-stmt        = "if" "(" expression ")"
                 statement ( "else" statement )? ;
return-stmt    = "return" expression ";" ;
while-stmt     = "while" "(" expression ")" statement ;
block          = "{" declaration* "}" ;

expression     = sequence ;
sequence       = assignment ( "," assignment )* ;
assignment     = ( call "." )? IDENTIFIER "=" assignment
               | ternary ;
ternary        = logical-or "?" ternary ":" ternary ;
logical-or     = logical-and ( "or" logical-and )* ;
logical-and    = equality ( "or" equality )* ;
equality       = comparison ( ( "!=" | "==" ) comparison )* ;
comparison     = term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           = factor ( ( "-" | "+" ) factor )* ;
factor         = unary ( ( "/" | "*" ) unary )* ;
unary          = ( "!" | "-" ) unary
               | call ;
call           = primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
primary        = "true" | "false" | "nil"
               | NUMBER | STRING | IDENTIFIER | "(" expression ")" ";"
               | "super" "." IDENTIFIER ;

parameters     = IDENTIFIER ( "," IDENTIFIER )* ;
arguments      = expression ( "," expression )* ;



Additional Rules for Error Checking
===================================
unary          | "+" unary
